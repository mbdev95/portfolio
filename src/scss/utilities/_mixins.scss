@use 'sass:math';

// A mixin to generate the stars
@mixin starGenerator {
    $star-colors-list: map-get($bg-colors, star-colors);
    @for $i from 1 through $numberOfStars {
        &--#{$i} {
            position: absolute;
            left: -5px;
            top: var(--percentage-below-top);
            width: math.random(2) * 1px;
            height: math.random(2) * 1px;
            border-radius: (math.random() * 10%) + 45%;
            filter: blur(0.7px);
            @each $starColor in $star-colors-list {
                @if math.random(5) == index($star-colors-list, $starColor) {
                    background-color: $starColor;
                }
            }
// Animation for causing the star to twinkle and then become a shooting star
            &__start-animation {
                position: absolute;
                left: math.floor(math.random() * 100%);
                animation: twinkle 3.5s ease-out, 
                disappearing 2s ease-out 3.5s; 
            }
// An animation for causing stars to shoot infinitely across the page and restart at the left side of the page once the star reaches the right edge of the page
            &__shooting {
                animation: shooting var(--star-speed) linear var(--star-delay) infinite backwards,
                           twinkle var(--twinkle-speed) ease-out var(--twinkle-delay) infinite;
            }
        }
    }
}

// A mixin for creating the intro text shadow 3D effect
@mixin introTextShadow() {
    $introTextShadows: ();
    @for $i from 1 through 50 {
        $x: 0.125 * $i + px;
        $y: 0.125 * $i + px;
        $rgb: 255 - $i * 5;
        $shadow: $x $y rgb($rgb, $rgb, $rgb);
        $introTextShadows: append($introTextShadows, $shadow, comma);
    }
    text-shadow: $introTextShadows;
}

// A mixin for styling buttons
@mixin buttons {
    button {
        @extend %project-buttons;
        background-color: rgb(39, 58, 226);
    }

    button:hover {
        cursor: pointer;
        background-color: rgb(66, 81, 219);
    }

    button:first-of-type {
        margin-bottom: 10px;
    }
}

// A mixin for styling each project in the portfolio
@mixin project {
    &--project {
        h2 {
            margin-top: 6px;
            margin-bottom: 0px;
        }

        img:first-of-type {
            background: white;
        }

        img {
            margin-top: 10px;
            width: 55%;
        }

        h3 {
            margin-top: 13.5px;
            margin-bottom: 13.5px;
        }

        h3, p, ul, li {
            text-align: start;
        }

        ul {
            list-style: none;
            padding: 0px;
        }

        ul li:before {
            content: "\2022";  /* Add content: \2022 is the CSS Code/unicode for a bullet */
            color: $text-color; /* Change the color */
            font-weight: bold; /* If you want it to be bold */
            display: inline-block; /* Needed to add space between the bullet and the text */
            width: 1em; /* Also needed for space (tweak if needed) */
            height: 1em;
        }

        button {
            border-radius: 500px;
            width: 100%;
            background-color: rgb(29, 29, 170);
        }

        button:hover {
            cursor: pointer;
            background-color: rgb(47, 47, 160);
        }

        @include mq('extra-large') {
            img {
                width: 66%;
            }
        }
        
        @include mq('medium') {
            img[alt^='Brooklyn'] {
                width: 80%;
            }
        }
    }
}

// A media query mixin creator to create media query statements.
@mixin mq($break) {
    @if $break == 'small' {
        @media (min-width: $brkpoint-sm) {
            @content;
        }
    }
    @else if $break == 'medium' {
        @media (min-width: $brkpoint-md) {
            @content;
        }
    }
    @else if $break == 'large' {
        @media (min-width: $brkpoint-lg) {
            @content;
        }
    }
    @else if $break == 'extra-large' {
        @media (min-width: $brkpoint-xl) {
            @content;
        }
    }
    @else {
        @error 'Whoops! No value could be retrieved for `#{$break}`. '
    }
}